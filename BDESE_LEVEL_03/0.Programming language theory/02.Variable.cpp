/*
	02.변수
*/
/*
	1장.변수

		변수 : 데이터를 저장하거나, 나중에 사용할 수 있도록 메모리에 추상화하는 것
		변수의 4요소 : 이름,속성,주소,값  // 이름 - 속성 - 주소(값)	
		바인딩 : 변수의 4요소에 어떤 값을 "확정"하는 행위.
		변수의 속성 : 일반적으로 프로그래밍 과정에선 변할 수 있지만, 번역시간엔 변할 수 없다.
		변수의 주소 : 변수의 값이 저장될 기억장소 위치.
*/
/*
	2장 바인딩
	
	-바인딩의 개념-
		바인딩 :프로그램의 어떤 단위가 구성요소의 값,속성,성격이 결정되는 것
		바인딩 시간 : 바인딩이 일어나는 시점

	-바인딩 시간의 종류
		언어정의 시간 : 언어에서 허용한 자료구조,프로그램 구조를 확정시키는 시간
		언어구현 시간 : 언어 정의 시, 구성요소들의 모든 특성을 확정하기보다, 일부 특성만 확정시키는 시간
		컴파일 시간 : 정적 데이터의 레이아웃, 기계어의 상위 수준 구성 매핑 선택 시간
		링크 시간 : 라이브러리 모듈을 링크할 때 걸리는 시간
		로드 시간 : 프로그램을 실행하고 메모리로 불러오는 시간
		실행 시간 : 프로그램실행부터 종료까지 변수에 값 확정,기억 주소할당 등을 바인딩하는 시간.
*/
/*
	3장 선언,블록,영역

	-선언-
		사용될 자료의 속성을 번역기에 알려주는 문장.

		명시적 선언 : 선언문을 사용. 변수에 속성 부여 ->JAVA
		묵시적 선언 : 선언문을 사용 X,기본규칙으로 변수에 속성 부여 ->FORTRAN,PERL
		C,C++의 선언과 정의의 구별
			선언 : 부분적인 속성만을 바인딩하는 것
			정의 : 모든 잠재적인 속성을 전부 바인딩하는 것
	-블록-
		자체적인 선언을 가질 수 있는 문장의 단편
		처음 도입한 언어는 Algol 60. // begin~end

		Ada의 블록 : 
			기본형 : declare~begin~end
			선언문 생략 : begin~end

		C언어의 블록(복합문) : 중괄호로 묶어 표현.

	-영역- 
		식별자가 이름의 효력이 나타낼 수 있는 범위
	
		변수 수명:  기억 장소가 배정된 시간

		0.	정적 영역 
			Algol60 최초 도입
			외향적인 구조. 자신을 가진 블록 확인 후 없으면, 바깥 쪽 블록을 확인.

		1. 동적 영역 ----------------------------------------------------------------------------------> 이해 불가.
			APL,SNOBOL4,LISP 초기버전 최초 도입
			외향적인 구조에 기반하지 않음. 부프로그램의 호출 순서에 기반함.

*/
/*
	4장.동적 바인딩

		실행 시간 중에 일어나거나,실행 과정에서 변경되는 것.
		객체지향 프로그래밍에선 상속 관계의 객체의 멤버 함수 호출 시 동작하게 될 함수가 동적으로 결정되는 개념

		// 책의 설명 :	  부모에 어떤 함수가 있는데, 자식은 이 함수를 재정의하거나,어떤 자식은 하지 않음. 
						  그 후 자식들이 함수를 호출하면, 재정의 여부에 따라 재정의 함수가 호출되거나, 아니면 기반의 부모 메소드가 호출됨
						  이처럼 상속 관계의 객체의 멤버 함수 호출 시 동작하게 될 함수가 동적으로 결정되는 개념

		0. C++의 동적 바인딩
			가상 함수(C++의 동적바인딩):기반 클래스의 함수 이름 앞에 virtual 한정자 기입
			순수 가상 함수: 부모 클래스의 함수지만 아무런 정의가 없음.
			구조와 예시 : ----------------------------------------------------------------------------------------> 이해 불가.
		1. JAVA의 동적 바인딩
			멤버 함수가 기본적으로 동적 바인딩이 적용됨.
			구조와 예시 : --------------------------------------------------------------------> 이해 불가.
*/
/*
	5장. 기억장소,생명시간.


*/