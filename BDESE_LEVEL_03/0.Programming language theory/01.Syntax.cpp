/*
	1장. 프로그래밍 언어의 어휘 구조

	예약어(reserved Word) : 프로그래밍 언어에서 이미 문법적으로 사용되는 단어 -> 식별자로 사용 불가.
	식별자(identifier) : 한 개 이상의 어휘 토큰을 가진, 구문적으로 허용된 프로그램의 일부 구조이자 언어 구성자.
	리터럴(literal, 상수) : 코드 상 쓰인 값이 실행 시 실제 그대로의 이미를 갖는 것.
	특수기호 : 세미콜론(;),마침표(.),연산 기호(+,-,*,/)
*/
/*
	2장. 문맥 자유 문법과 BNF

		정규 문법의 생성 규칙 : 좌변은 변수, 우변은 특별한 형태 꼴

		강력한 문법을 만들기 위해 생성 규칙 제약을 완화시킬 필요가 있다.
	
		좌변은 놔두고, 우변의 제약을 해제.  -> 문맥-자유 문법 정의 가능

	-BNF 표기법(Backus-Naur_Form)-

		Algol의 구문을 정의하기 위해 설계.

		0. BNF 기호
			
			<메타기호>
			::=  :  정의
			<>   :	비단말 기호
			|	 :  택일

			<비단말 기호>
			<>로 묶인 기호 : <식별자>,<문자>,<논리식>..

			<단말기호>
			비단말 기호나 메타 기호가 아닌 것 :  A,B,0,then,if,+ ...



		1. EBNF 기호

			BNF의 확장판. 간결한 표기를 위한 추가적인 메타 기호 사용.

			<메타 기호>
			[] : 생략 가능
			{} : 0번 이상 반복
			() : 한정된 범위의 택일. |와 함께 사용됨
			'' : 메타 기호를 단말 기호로 취급.

			//begin~end 개념 추가 필요 --->

*/
/*
	3장. 파스 트리와 모호성

		1. 파스 트리(parse Tree)
			
			파스 트리: 


*/
/*
	4장. 구문 도표




*/